import numpy as np
import matplotlib.pyplot as plt

# Fungsi untuk menghitung jarak Euclidean
def euclidean_distance(x1, x2):
    distance = np.sqrt(np.sum((x1 - x2) ** 2))
    return distance

# Membuat kelas KNN
class KNNClassifier:
    def __init__(self, k=3):
        self.k = k
    
    # Algoritma pelatihan KNN (hanya menyimpan data)
    def fit(self, X_train, y_train):
        self.X_train = X_train
        self.y_train = y_train

    # Algoritma untuk memprediksi
    def predict(self, X_test):
        predictions = [self._predict(x) for x in X_test]
        return np.array(predictions)

    # Menghitung prediksi satu titik data
    def _predict(self, x):
        # Hitung jarak antara x dan semua titik data latih
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]
        
        # Dapatkan indeks dari k tetangga terdekat
        k_indices = np.argsort(distances)[:self.k]
        
        # Mengambil label dari tetangga
        k_nearest_labels = [self.y_train[i] for i in k_indices]

        # Voting mayoritas
        most_common = np.bincount(k_nearest_labels).argmax()
        return most_common

# Dataset sederhana
X_train = np.array([
    [5.6, 7.1], [6.3, 6.7], [7.2, 5.8], [6.5, 7.4], [5.8, 6.9], 
    [7.6, 6.2], [5.4, 7.0], [6.8, 5.9], [7.5, 6.4], [8.0, 5.7], 
    [5.7, 6.6], [6.4, 5.5], [6.9, 7.3], [7.7, 6.5], [5.5, 8.0], 
    [7.0, 7.2], [6.1, 6.8], [8.0, 5.9], [5.9, 7.4], [6.7, 7.1], 
    [5.8, 7.6], [6.3, 5.7], [7.8, 6.1], [5.6, 6.4], [6.7, 7.5], 
    [7.4, 5.6], [6.5, 7.8], [5.7, 6.1], [8.0, 7.0], [6.2, 5.9], 
    [7.1, 6.8], [5.9, 7.7], [6.0, 6.5], [5.8, 8.0], [6.4, 5.8], 
    [7.6, 7.4], [5.5, 6.7], [8.0, 5.6], [6.9, 6.2], [5.7, 7.5], 
    [7.3, 6.7], [6.0, 5.9], [7.7, 8.0], [5.9, 7.3], [6.5, 6.8], 
    [7.8, 6.0], [5.9, 7.7], [6.7, 5.9], [4.9, 6.1], [6.7, 4.5], 
    [2.3, 0.4], [1.2, 1.8], [0.9, 2.8], [2.2, 1.1], [1.5, 2.6], 
    [2.7, 1.2], [0.8, 1.5], [2.4, 0.6], [1.0, 2.9], [2.6, 1.4], 
    [1.3, 0.7], [2.5, 1.3], [0.2, 2.8], [1.7, 2.2], [2.1, 0.3], 
    [0.5, 2.7], [1.4, 1.9], [2.8, 0.8], [1.0, 0.2], [2.0, 1.5], 
    [0.9, 2.1], [2.4, 0.7], [1.1, 2.6], [2.9, 1.2], [0.8, 1.6], 
    [1.5, 0.9], [2.2, 0.5], [2.5, 2.7], [1.3, 0.8], [0.6, 2.2], 
    [1.7, 1.1], [2.3, 2.5], [2.9, 0.4], [1.0, 2.3], [0.8, 1.4], 
    [2.1, 2.7], [2.0, 0.9], [1.6, 2.1], [2.4, 1.5], [0.3, 2.4], 
    [1.8, 2.8], [2.2, 1.6], [1.4, 0.7], [0.9, 1.8],  [1.3, 1.8],
    [1.5, 0.6], [2.8, 1.1], [0.7, 2.2], [2.5, 1.9], [1.1, 0.8]
    ])
y_train = np.array([
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

# Data baru yang akan kita prediksi
X_test = np.array([[4.0, 4.0]])

# Membuat instance dari KNNClassifier dengan k=3
knn = KNNClassifier(k=6)

# Melatih model dengan data latih
knn.fit(X_train, y_train)

# Memprediksi label untuk data baru
predictions = knn.predict(X_test)

print("Prediksi untuk X_test:", predictions)

# Membuat plot
plt.figure(figsize=(16, 16))

# Plot data untuk target 0 (Cluster merah)
plt.scatter(X_train[y_train == 0, 0], X_train[y_train == 0, 1], color='red', label='Target 0', marker='o')

# Plot data untuk target 1 (Cluster biru)
plt.scatter(X_train[y_train == 1, 0], X_train[y_train == 1, 1], color='blue', label='Target 1', marker='x')

# Plot data uji (Hijau)
plt.scatter(X_test[:, 0], X_test[:, 1], color='green', label='Test Data', marker='*', s=100)

# Menambahkan label dan judul
plt.xlabel('Fitur 1')
plt.ylabel('Fitur 2')
plt.title('Plot Data dengan Dua Cluster')
plt.legend()

# Menampilkan plot
plt.grid(False)
plt.show()
